from numpy import log
from utils.aliases import DATASETS, OUT_DIR
import utils.file_handling as file_handler
import pandas as pd
import matplotlib.pyplot as plt
import mpld3
from mpld3 import plugins


def prepare_sdg():
    df = pd.read_csv(DATASETS.get("sdg"))

    # The format of this file is weird, in the way, that it comes with two headers.
    # Where in the first row is the second header.
    # See file for 1st header

    header = df.iloc[0]
    df = df[1:]
    df.columns = header
    return df


# Simplifying list comprehension
def _is_digit_and_is_between_range(column, min, max):
    if column.isdigit():
        if int(column) < min or int(column) > max:
            return True
    return False


# prototype
def basic_sdg(min_date=2000, max_date=2019):
    # Files are generated by their name.
    # If a file in the out directory already contains a file by the generated name,
    # then the function will not be called to save processing power.
    file_name = file_handler.generate_file_name("sdg_basic", min_date, max_date)
    if file_name == False:
        return
    df = prepare_sdg()
    df = df.drop(
        columns=[
            column
            for column in df.columns
            if _is_digit_and_is_between_range(column, min_date, max_date)
        ],
        axis=1,
    )

    df = df[df["WHO region"] == "Global"]
    df.drop(columns=["WHO region"], inplace=True)
    df = df.T

    header = df.iloc[0]
    df = df[1:]
    df.columns = header

    print(df)
    
    
    fig, ax = plt.subplots(figsize=(20,5))
    ax.bar(df["Male"], df["Female"])
    #ax.grid(True, alpha=0.3)
    

        #ax.fill_between(val.index,
        #                val.values * .5, val.values * 1.5,
        #                color=l.get_color(), alpha=.4)
    
    handles, labels = ax.get_legend_handles_labels() # return lines and labels
    interactive_legend = plugins.InteractiveLegendPlugin(zip(handles,
                                                             ax.collections),
                                                         labels,
                                                         alpha_unsel=0.5,
                                                         alpha_over=1.5, 
                                                         start_visible=True)
    plugins.connect(fig, interactive_legend)

    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title('Interactive legend', size=20)
    
    return mpld3.fig_to_html(fig)
    #plt.savefig(f"{OUT_DIR}/{file_name}.png")
